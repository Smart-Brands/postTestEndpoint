import { RedshiftDataServiceException as __BaseException } from "./RedshiftDataServiceException";
export class ActiveStatementsExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ActiveStatementsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ActiveStatementsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActiveStatementsExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class BatchExecuteStatementException extends __BaseException {
    constructor(opts) {
        super({
            name: "BatchExecuteStatementException",
            $fault: "server",
            ...opts,
        });
        this.name = "BatchExecuteStatementException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BatchExecuteStatementException.prototype);
        this.Message = opts.Message;
        this.StatementId = opts.StatementId;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export class DatabaseConnectionException extends __BaseException {
    constructor(opts) {
        super({
            name: "DatabaseConnectionException",
            $fault: "server",
            ...opts,
        });
        this.name = "DatabaseConnectionException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DatabaseConnectionException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
    }
}
export const StatusString = {
    ABORTED: "ABORTED",
    ALL: "ALL",
    FAILED: "FAILED",
    FINISHED: "FINISHED",
    PICKED: "PICKED",
    STARTED: "STARTED",
    SUBMITTED: "SUBMITTED",
};
export const StatementStatusString = {
    ABORTED: "ABORTED",
    FAILED: "FAILED",
    FINISHED: "FINISHED",
    PICKED: "PICKED",
    STARTED: "STARTED",
    SUBMITTED: "SUBMITTED",
};
export class ExecuteStatementException extends __BaseException {
    constructor(opts) {
        super({
            name: "ExecuteStatementException",
            $fault: "server",
            ...opts,
        });
        this.name = "ExecuteStatementException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ExecuteStatementException.prototype);
        this.Message = opts.Message;
        this.StatementId = opts.StatementId;
    }
}
export var Field;
(function (Field) {
    Field.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field || (Field = {}));
