import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { RedshiftDataServiceException as __BaseException } from "./RedshiftDataServiceException";
export declare class ActiveStatementsExceededException extends __BaseException {
  readonly name: "ActiveStatementsExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ActiveStatementsExceededException,
      __BaseException
    >
  );
}
export declare class BatchExecuteStatementException extends __BaseException {
  readonly name: "BatchExecuteStatementException";
  readonly $fault: "server";
  Message: string | undefined;
  StatementId: string | undefined;
  constructor(
    opts: __ExceptionOptionType<BatchExecuteStatementException, __BaseException>
  );
}
export interface BatchExecuteStatementInput {
  Sqls: string[] | undefined;
  ClusterIdentifier?: string;
  SecretArn?: string;
  DbUser?: string;
  Database: string | undefined;
  WithEvent?: boolean;
  StatementName?: string;
  WorkgroupName?: string;
  ClientToken?: string;
}
export interface BatchExecuteStatementOutput {
  Id?: string;
  CreatedAt?: Date;
  ClusterIdentifier?: string;
  DbUser?: string;
  Database?: string;
  SecretArn?: string;
  WorkgroupName?: string;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CancelStatementRequest {
  Id: string | undefined;
}
export interface CancelStatementResponse {
  Status?: boolean;
}
export declare class DatabaseConnectionException extends __BaseException {
  readonly name: "DatabaseConnectionException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<DatabaseConnectionException, __BaseException>
  );
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface ColumnMetadata {
  isCaseSensitive?: boolean;
  isCurrency?: boolean;
  isSigned?: boolean;
  label?: string;
  name?: string;
  nullable?: number;
  precision?: number;
  scale?: number;
  schemaName?: string;
  tableName?: string;
  typeName?: string;
  length?: number;
  columnDefault?: string;
}
export interface DescribeStatementRequest {
  Id: string | undefined;
}
export interface SqlParameter {
  name: string | undefined;
  value: string | undefined;
}
export declare const StatusString: {
  readonly ABORTED: "ABORTED";
  readonly ALL: "ALL";
  readonly FAILED: "FAILED";
  readonly FINISHED: "FINISHED";
  readonly PICKED: "PICKED";
  readonly STARTED: "STARTED";
  readonly SUBMITTED: "SUBMITTED";
};
export type StatusString = (typeof StatusString)[keyof typeof StatusString];
export declare const StatementStatusString: {
  readonly ABORTED: "ABORTED";
  readonly FAILED: "FAILED";
  readonly FINISHED: "FINISHED";
  readonly PICKED: "PICKED";
  readonly STARTED: "STARTED";
  readonly SUBMITTED: "SUBMITTED";
};
export type StatementStatusString =
  (typeof StatementStatusString)[keyof typeof StatementStatusString];
export interface SubStatementData {
  Id: string | undefined;
  Duration?: number;
  Error?: string;
  Status?: StatementStatusString;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  QueryString?: string;
  ResultRows?: number;
  ResultSize?: number;
  RedshiftQueryId?: number;
  HasResultSet?: boolean;
}
export interface DescribeStatementResponse {
  Id: string | undefined;
  SecretArn?: string;
  DbUser?: string;
  Database?: string;
  ClusterIdentifier?: string;
  Duration?: number;
  Error?: string;
  Status?: StatusString;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  RedshiftPid?: number;
  HasResultSet?: boolean;
  QueryString?: string;
  ResultRows?: number;
  ResultSize?: number;
  RedshiftQueryId?: number;
  QueryParameters?: SqlParameter[];
  SubStatements?: SubStatementData[];
  WorkgroupName?: string;
}
export interface DescribeTableRequest {
  ClusterIdentifier?: string;
  SecretArn?: string;
  DbUser?: string;
  Database: string | undefined;
  ConnectedDatabase?: string;
  Schema?: string;
  Table?: string;
  NextToken?: string;
  MaxResults?: number;
  WorkgroupName?: string;
}
export interface DescribeTableResponse {
  TableName?: string;
  ColumnList?: ColumnMetadata[];
  NextToken?: string;
}
export declare class ExecuteStatementException extends __BaseException {
  readonly name: "ExecuteStatementException";
  readonly $fault: "server";
  Message: string | undefined;
  StatementId: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ExecuteStatementException, __BaseException>
  );
}
export interface ExecuteStatementInput {
  Sql: string | undefined;
  ClusterIdentifier?: string;
  SecretArn?: string;
  DbUser?: string;
  Database: string | undefined;
  WithEvent?: boolean;
  StatementName?: string;
  Parameters?: SqlParameter[];
  WorkgroupName?: string;
  ClientToken?: string;
}
export interface ExecuteStatementOutput {
  Id?: string;
  CreatedAt?: Date;
  ClusterIdentifier?: string;
  DbUser?: string;
  Database?: string;
  SecretArn?: string;
  WorkgroupName?: string;
}
export type Field =
  | Field.BlobValueMember
  | Field.BooleanValueMember
  | Field.DoubleValueMember
  | Field.IsNullMember
  | Field.LongValueMember
  | Field.StringValueMember
  | Field.$UnknownMember;
export declare namespace Field {
  interface IsNullMember {
    isNull: boolean;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }
  interface BooleanValueMember {
    isNull?: never;
    booleanValue: boolean;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }
  interface LongValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue: number;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }
  interface DoubleValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue: number;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }
  interface StringValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue: string;
    blobValue?: never;
    $unknown?: never;
  }
  interface BlobValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue: Uint8Array;
    $unknown?: never;
  }
  interface $UnknownMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    isNull: (value: boolean) => T;
    booleanValue: (value: boolean) => T;
    longValue: (value: number) => T;
    doubleValue: (value: number) => T;
    stringValue: (value: string) => T;
    blobValue: (value: Uint8Array) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Field, visitor: Visitor<T>) => T;
}
export interface GetStatementResultRequest {
  Id: string | undefined;
  NextToken?: string;
}
export interface GetStatementResultResponse {
  Records: Field[][] | undefined;
  ColumnMetadata?: ColumnMetadata[];
  TotalNumRows?: number;
  NextToken?: string;
}
export interface ListDatabasesRequest {
  ClusterIdentifier?: string;
  Database: string | undefined;
  SecretArn?: string;
  DbUser?: string;
  NextToken?: string;
  MaxResults?: number;
  WorkgroupName?: string;
}
export interface ListDatabasesResponse {
  Databases?: string[];
  NextToken?: string;
}
export interface ListSchemasRequest {
  ClusterIdentifier?: string;
  SecretArn?: string;
  DbUser?: string;
  Database: string | undefined;
  ConnectedDatabase?: string;
  SchemaPattern?: string;
  NextToken?: string;
  MaxResults?: number;
  WorkgroupName?: string;
}
export interface ListSchemasResponse {
  Schemas?: string[];
  NextToken?: string;
}
export interface ListStatementsRequest {
  NextToken?: string;
  MaxResults?: number;
  StatementName?: string;
  Status?: StatusString;
  RoleLevel?: boolean;
}
export interface StatementData {
  Id: string | undefined;
  QueryString?: string;
  QueryStrings?: string[];
  SecretArn?: string;
  Status?: StatusString;
  StatementName?: string;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  QueryParameters?: SqlParameter[];
  IsBatchStatement?: boolean;
}
export interface ListStatementsResponse {
  Statements: StatementData[] | undefined;
  NextToken?: string;
}
export interface ListTablesRequest {
  ClusterIdentifier?: string;
  SecretArn?: string;
  DbUser?: string;
  Database: string | undefined;
  ConnectedDatabase?: string;
  SchemaPattern?: string;
  TablePattern?: string;
  NextToken?: string;
  MaxResults?: number;
  WorkgroupName?: string;
}
export interface TableMember {
  name?: string;
  type?: string;
  schema?: string;
}
export interface ListTablesResponse {
  Tables?: TableMember[];
  NextToken?: string;
}
